{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#pythermonomics","title":"PyThermoNomics","text":"<p>Welcome to the PyThermoNomics documentation!</p> <p>This project provides tools for geothermal economics calculations, including Net Present Value (NPV) and Levelized Cost of Energy (LCOE) computations, well simulation, and more.</p>"},{"location":"#modules","title":"Modules","text":"<ul> <li>geothermal_economics: Main API for economics calculations.</li> <li>config: Configuration models and utilities.</li> <li>energy_model: Energy calculation models.</li> <li>data: Simulation readers and well results.</li> <li>npv_model: NPV and cost models.</li> </ul>"},{"location":"#api-reference","title":"API Reference","text":"<p>Explore the API documentation for each module:</p> <ul> <li>geothermal_economics</li> <li>config</li> <li>energy_model</li> <li>data</li> <li>npv_model</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started, see the README or browse the API reference above.</p>"},{"location":"#examples","title":"Examples","text":"<p>An example of how to run a case for a doublet system for a real reservoir model is shown in the Jupyter Notebook found in <code>examples/main_example_notebook.ipynb</code>.  Explanation on how to install Jupyter Notebook can be found here.</p>"},{"location":"#input-description","title":"Input description","text":"<ul> <li>InputConfigYaml</li> <li>InputDeviationFiles</li> <li>SimulationTimeSeries</li> </ul>"},{"location":"#column-description-of-output-dataframecsv","title":"Column description of output DataFrame/CSV","text":"<ul> <li>ColumnNames</li> </ul>"},{"location":"#net-present-value-equations","title":"Net Present Value equations","text":"<p>To see the equations related to the NPV and LCOE please see Equations.</p>"},{"location":"#development-notes","title":"Development notes","text":"<p>Notes on the development including assumptions and limitations are mentioned in DevelopmentNotes.</p>"},{"location":"api/cli/","title":"pythermonomics.cli","text":"<p>Module: <code>pythermonomics.cli</code></p> <p>The CLI (<code>pythermonomics.cli</code>) is the main entry point for running geothermal economics calculations from the command line.</p>"},{"location":"api/cli/#purpose","title":"Purpose","text":"<ul> <li>Provides a user-friendly command-line interface for NPV and LCOE calculations.</li> <li>Allows users to specify configuration, simulation, deviation, and trajectory files.</li> <li>Outputs results to the console and optionally saves them to disk.</li> </ul>"},{"location":"api/cli/#main-function","title":"Main Function","text":""},{"location":"api/cli/#main","title":"<code>main()</code>","text":"<p>Parses command-line arguments, sets up logging, and runs the NPV/LCOE calculation workflow.</p>"},{"location":"api/cli/#arguments","title":"Arguments","text":"<ul> <li><code>-c, --config</code>: Path to YAML configuration file (required)</li> <li><code>-i, --sim-data</code>: Path to simulation data CSV file (optional)</li> <li><code>-d, --dev-files</code>: Path to directory with deviation files (optional)</li> <li><code>-t, --trajectoryfile</code>: Path to well trajectory file (optional)</li> <li><code>--no-save</code>: Do not save results to files</li> <li><code>-v, --verbose</code>: Enable verbose output</li> </ul>"},{"location":"api/cli/#usage","title":"Usage","text":"<p>After installing the package, run:</p> <pre><code>python -m pythermonomics.cli -c config.yml -i sim_data.csv -d deviations/\n</code></pre> <p>Or, if installed as a script:</p> <pre><code>pythermonomics -c config.yml -i sim_data.csv -d deviations/\n</code></pre>"},{"location":"api/cli/#example-output","title":"Example Output","text":"<ul> <li>NPV and LCOE printed to the console</li> <li>Results saved to <code>npv</code>, <code>lcoe</code>, and <code>cashflow.csv</code> files (unless <code>--no-save</code> is specified)</li> </ul>"},{"location":"api/cli/#api-reference","title":"API Reference","text":"<p>See GeothermalEconomics for the main API.</p>"},{"location":"api/cli/#related-modules","title":"Related Modules","text":"<ul> <li>GeothermalEconomicsConfig</li> <li>EnergyCalculator</li> <li>EconomicsCalculator</li> </ul>"},{"location":"api/config/","title":"pythermonomics.config API Reference","text":"<p>This module provides configuration models and utilities for geothermal economics calculations.</p>"},{"location":"api/config/#classes","title":"Classes","text":"<ul> <li><code>GeothermalEconomicsConfig</code>: Loads and validates configuration for NPV and LCOE calculations, including project parameters, well definitions, and reservoir settings.</li> <li><code>TechnoEconomicParameters</code>: Defines techno-economic parameters required for NPV and LCOE calculations.</li> <li><code>ReservoirSimulationParameters</code>: Reservoir-specific configuration for simulation.</li> <li><code>EnergyLossParameters</code>: Energy loss related parameters.</li> <li><code>WellTrajectory</code>: Very basic definition of well trajectory.</li> </ul>"},{"location":"api/config/#api-details","title":"API Details","text":"<ul> <li> <p>GeothermalEconomicsConfig:   Handles loading from YAML files, validation of configuration data, and provides access to all project parameters required for economics and simulation.</p> </li> <li> <p>TechnoEconomicParameters:   Contains all the techno-economic geothermal system parameters (loadhours, pumpcosts, etc.) used in calculations.</p> </li> <li> <p>ReservoirSimulationParameters:   Contains reservoir-specific settings such as production temperature, BHP, and flowrate.</p> </li> <li> <p>EnergyLossParameters:   Contains energy loss related parameters such as well roughness and tubing size.</p> </li> <li> <p>WellTrajectory:   Contains very basic description of a well trajectory</p> </li> </ul>"},{"location":"api/config/#class-documentation","title":"Class Documentation","text":"<ul> <li>GeothermalEconomicsConfig</li> <li>TechnoEconomicParameters</li> <li>ReservoirSimulationParameters</li> <li>EnergyLossParameters</li> <li>WellTrajectory</li> </ul>"},{"location":"api/data/","title":"pythermonomics.data API Reference","text":"<p>This module provides classes for reading, processing, and managing simulation data, well results, and deviation files for geothermal projects.</p>"},{"location":"api/data/#classes","title":"Classes","text":"<ul> <li><code>SimulationDataReader</code>: Reads OPM/Eclipse simulation data from CSV files, extracts well names, states, and relevant time-series data.</li> <li><code>DeviationFileReader</code>: Reads deviation files for wells and extracts well name and coordinates.</li> <li><code>WellResults</code>: Reads simulated well paths and production characteristics over time from provided configuration data.</li> <li><code>SimulationModelResults</code>: Reads simulation results from summary files and well-paths from deviation files.</li> </ul>"},{"location":"api/data/#api-details","title":"API Details","text":"<ul> <li> <p>SimulationDataReader:   Handles extraction of well names, states, and time-series results from simulation CSV files.   Useful for integrating OPM/Eclipse output into the economics workflow.</p> </li> <li> <p>DeviationFileReader:   Parses well deviation files to obtain well trajectory and coordinate data.   Ensures correct mapping of well names to their spatial data.</p> </li> <li> <p>WellResults:   Manages well path and production data, providing access to time-series results and well states.   Used for further energy and financial calculations.</p> </li> <li> <p>SimulationModelResults:   Combines summary simulation results and deviation file data for wells.   Provides a unified interface for downstream calculations.</p> </li> </ul>"},{"location":"api/data/#class-documentation","title":"Class Documentation","text":"<ul> <li>SimulationDataReader</li> <li>DeviationFileReader</li> <li>WellResults</li> <li>SimulationModelResults</li> </ul>"},{"location":"api/energy_model/","title":"pythermonomics.energy_model API Reference","text":"<p>This module provides classes and functions for geothermal energy calculations, including simulation data readers, well trajectory handling, and energy production modeling.</p>"},{"location":"api/energy_model/#classes","title":"Classes","text":"<ul> <li><code>EnergyCalculator</code>: Main class for energy calculations.</li> </ul>"},{"location":"api/energy_model/#class-documentation","title":"Class Documentation","text":"<ul> <li>EnergyCalculator</li> </ul>"},{"location":"api/geothermal_economics/","title":"GeothermalEconomics","text":"<p>Module: <code>pythermonomics.geothermal_economics</code></p> <p>The <code>GeothermalEconomics</code> class is the main entry point for geothermal economics calculations. It combines configuration, simulation data, well trajectory, energy, and financial models to compute Net Present Value (NPV) and Levelized Cost of Energy (LCOE) for geothermal projects.</p>"},{"location":"api/geothermal_economics/#purpose","title":"Purpose","text":"<ul> <li>Loads project settings and configuration from YAML files.</li> <li>Integrates simulation results (CSV format).</li> <li>Handles well trajectory and deviation files.</li> <li>Manages energy calculations, well cost modeling, and financial computations.</li> <li>Provides a unified API for running NPV/LCOE calculations.</li> </ul>"},{"location":"api/geothermal_economics/#main-attributes","title":"Main Attributes","text":"<ul> <li><code>economics_config</code>: Project configuration (GeothermalEconomicsConfig)</li> <li><code>simresults</code>: Well simulation results (WellResults or SimulationModelResults)</li> <li><code>welltrajectory</code>: Well trajectory object</li> <li><code>wellcostmodel</code>: Well cost model (CostModelWell)</li> <li><code>energy_calculator</code>: Energy calculation model (EnergyCalculator)</li> <li><code>npv_calculator</code>: NPV calculation model (EconomicsCalculator)</li> </ul>"},{"location":"api/geothermal_economics/#main-methods","title":"Main Methods","text":"<ul> <li><code>__init__(...)</code>: Initializes the class with configuration, simulation, and trajectory data.</li> <li><code>compute_economics()</code>: Computes NPV, LCOE, cashflow, well results, and well states.</li> <li><code>compute_energy(cashflow)</code>: Computes energy terms for the project.</li> <li><code>from_trajectory(settingfile, trajectoryfile)</code>: Alternate constructor for well trajectory input.</li> <li><code>from_config_only(settingfile)</code>: Alternate constructor for using only the config as input. </li> <li><code>from_summary_deviation_file(settingfile, summary_file, deviation_files_dir)</code>: Alternate constructor for simulation data and deviation files.</li> <li><code>from_dc1d(settingfile, trajectoryfile, dc1dwell)</code>: Alternate constructor for DC1D well input.</li> </ul>"},{"location":"api/geothermal_economics/#usage","title":"Usage","text":"<p>If you want to run the geothermal_economics based on a deviation file for each well and simulation data in  csv format: <pre><code>from pythermonomics.geothermal_economics import GeothermalEconomics\n\neconomics = GeothermalEconomics.from_summary_deviation_file(\n    settingfile='config_file.yml',\n    summary_file='sim_data.csv',\n    deviation_files_dir='dev_files/',\n)\n\nnpv, lcoe_val, cashflow, wellRes, well_states, well_results = economics.compute_economics()\n</code></pre></p> <p>If you want to run the geothermal_economics based on only the config and a well trajectory file:  <pre><code>from pythermonomics.geothermal_economics import GeothermalEconomics\n\neconomics = GeothermalEconomics.from_trajectory(\n    settingfile='config_file.yml',\n    trajectoryfile='trajectoryfile,yml',\n)\n\nnpv, lcoe_val, cashflow, wellRes, well_states, well_results = economics.compute_economics()\n</code></pre></p> <p>Running it just from the config is possible too:  <pre><code>from pythermonomics.geothermal_economics import GeothermalEconomics\n\neconomics = GeothermalEconomics.from_config_only(\n    settingfile='config_file.yml',\n)\n\nnpv, lcoe_val, cashflow, wellRes, well_states, well_results = economics.compute_economics()\n</code></pre></p> <p>Finally, it is also supported to run from a DC1DWell instance: <pre><code>from pythermonomics.geothermal_economics import GeothermalEconomics\n\nclass DummyDc1d:\n    temp = [60, 120]\n    salinity = [10000, 10000]\n    rw = [0.1, 0.1]\n    roughness = 0.05\n    qvol = 0.05\n    dpres = 30\n\ndc1d = DummyDc1d()\neconomics = GeothermalEconomics.from_dc1d(\n    settingfile='config_file.yml',\n    dc1dwell=dc1d.\n)\n\nnpv, lcoe_val, cashflow, wellRes, well_states, well_results = economics.compute_economics()\n</code></pre></p>"},{"location":"api/geothermal_economics/#cli-entry-point","title":"CLI Entry Point","text":"<p>See CLI Documentation for command-line usage.</p>"},{"location":"api/geothermal_economics/#related-components","title":"Related Components","text":"<ul> <li>GeothermalEconomicsConfig</li> <li>WellResults</li> <li>SimulationModelResults</li> <li>EnergyCalculator</li> <li>EconomicsCalculator</li> <li>CostModelWell</li> </ul>"},{"location":"api/npv_model/","title":"pythermonomics.npv_model API Reference","text":"<p>This module provides classes and functions for Net Present Value (NPV) and cost modeling for geothermal projects.</p>"},{"location":"api/npv_model/#classes","title":"Classes","text":"<ul> <li><code>EconomicsCalculator</code>: Main class for NPV and LCOE calculations.</li> <li><code>CostModelWell</code>: Computes costs for wells based on trajectories.</li> </ul>"},{"location":"api/npv_model/#class-documentation","title":"Class Documentation","text":"<ul> <li>EconomicsCalculator</li> <li>CostModelWell</li> </ul>"},{"location":"api/config/EnergyLossParameters/","title":"EnergyLossParameters","text":"<p>Module: <code>pythermonomics.config.energy_loss_parameters</code></p> <p>Parameters related to energy losses from well to the surface.</p>"},{"location":"api/config/EnergyLossParameters/#purpose","title":"Purpose","text":"<ul> <li>Stores settings such as well_roughness and well_tubing.</li> <li>Used for calculating energy losses in the energy calculations.</li> </ul>"},{"location":"api/config/EnergyLossParameters/#main-fields","title":"Main Fields","text":"<ul> <li><code>well_roughness</code>: Roughness of the well (milli inch)</li> <li><code>well_tubing</code>: Production tubing (inch)</li> <li><code>useheatloss</code>: Use calculated heatlosses in energy calculation (-)</li> <li><code>tsurface</code>: Surface temerpature (\u00b0C)</li> <li><code>tgrad</code>: Temperature gradient in subsurface (\u00b0C/m)</li> </ul>"},{"location":"api/config/EnergyLossParameters/#usage","title":"Usage","text":"<pre><code>from pythermonomics.config.energy_loss_parameters import EnergyLossParameters\n\nenergy_loss_params = EnergyLossParameters(\n    well_roughness=0.138,\n    well_tubing=8.5,\n    # ...other parameters...\n)\n</code></pre>"},{"location":"api/config/GeothermalEconomicsConfig/","title":"GeothermalEconomicsConfig","text":"<p>Module: <code>pythermonomics.config.geothermal_economics_config</code></p> <p>Loads and validates configuration for geothermal economics calculations.</p>"},{"location":"api/config/GeothermalEconomicsConfig/#purpose","title":"Purpose","text":"<ul> <li>Loads configuration from YAML files.</li> <li>Validates and provides access to project parameters, well definitions, and reservoir settings.</li> <li>Supports optional configuration of reservoir simulation and energy loss parameters.</li> </ul>"},{"location":"api/config/GeothermalEconomicsConfig/#related-classes","title":"Related Classes","text":"<ul> <li>TechnoEconomicParameters</li> <li>ReservoirSimulationParameters</li> <li>EnergyLossParameters</li> <li>WellTrajectory</li> </ul>"},{"location":"api/config/GeothermalEconomicsConfig/#main-methods","title":"Main Methods","text":"<ul> <li><code>load_from_file(path)</code>: Loads configuration from a YAML file.</li> <li><code>validate()</code>: Validates the loaded configuration data.</li> </ul>"},{"location":"api/config/GeothermalEconomicsConfig/#usage","title":"Usage","text":"<pre><code>from pythermonomics.config.geothermal_economics_config import GeothermalEconomicsConfig\n\nconfig = GeothermalEconomicsConfig.load_from_file(path=\"config.yml\")\n\nparameters = config.techno_eco_param\nsim_params = config.reservoir_parameters\nenergy_loss_params = config.energy_loss_parameters\nwell_trajectories = config.well_trajectories\n</code></pre>"},{"location":"api/config/ReservoirSimulationParameters/","title":"ReservoirSimulationParameters","text":"<p>Module: <code>pythermonomics.config.reservoir_simulation_parameters</code></p> <p>Reservoir-specific configuration for simulation and economics.</p>"},{"location":"api/config/ReservoirSimulationParameters/#purpose","title":"Purpose","text":"<ul> <li>Stores reservoir-specific settings such as production temperature, BHP, and flowrate.</li> <li>Used for simulation and economics calculations.</li> </ul>"},{"location":"api/config/ReservoirSimulationParameters/#main-fields","title":"Main Fields","text":"<ul> <li><code>injection_temperature</code>: Injection temperature (\u00b0C)</li> <li><code>production_temperature</code>: Production temperature (\u00b0C)</li> <li><code>injection_BHP</code>: Injection bottom hole pressure (bar)</li> <li><code>production_BHP</code>: Production bottom hole pressure (bar)</li> <li><code>flowrate</code>: Flowrate (m\u00b3/h)</li> <li><code>salinity</code>: Salinity used for brine heat capacity (ppm)</li> </ul>"},{"location":"api/config/ReservoirSimulationParameters/#usage","title":"Usage","text":"<pre><code>from pythermonomics.config.reservoir_simulation_parameters import ReservoirSimulationParameters\n\nres_params = ReservoirSimulationParameters(\n    production_temperature=90,\n    injection_BHP=260,\n    # ...other parameters...\n)\n</code></pre>"},{"location":"api/config/TechnoEconomicParameters/","title":"TechnoEconomicParameters","text":"<p>Module: <code>pythermonomics.config.techno_economics_config</code></p> <p>Defines system techno-economic parameters for NPV and LCOE calculations.</p>"},{"location":"api/config/TechnoEconomicParameters/#purpose","title":"Purpose","text":"<ul> <li>Stores all techno-economic parameters (loadhours, pump_efficiency, CAPEX_base, OPEX_base, etc.).</li> <li>Used for all financial calculations.</li> </ul>"},{"location":"api/config/TechnoEconomicParameters/#main-fields","title":"Main Fields","text":"<ul> <li><code>loadhours</code>: Operational hours per year</li> <li><code>wellcost_scaling</code>: Scaling factor for well cost</li> <li><code>pump_efficiency</code>: Pump efficiency</li> <li><code>CAPEX_base</code>: Base CAPEX for heat conversion</li> <li><code>OPEX_base</code>: Base OPEX per year</li> <li><code>equity_share</code>: Project equity fraction</li> <li><code>loan_nyear</code>: Loan duration (years)</li> <li><code>loan_rate</code>: Loan interest rate</li> <li><code>discount_rate</code>: Discount rate for equity share</li> <li><code>heat_price</code>: Heat price (EURct/kWh)</li> <li>...and more (see source for full list)</li> </ul>"},{"location":"api/config/TechnoEconomicParameters/#usage","title":"Usage","text":"<pre><code>from pythermonomics.config.techno_economics_config import TechnoEconomicParameters\n\ntechno_eco_params = TechnoEconomicParameters(\n    loadhours=6000,\n    pump_efficiency=0.6,\n    # ...other parameters...\n)\n</code></pre>"},{"location":"api/config/WellTrajectory/","title":"WellTrajectory","text":"<p>Module: <code>pythermonomics.config.well_trajectories_config</code></p> <p>Configuration for well trajectories in geothermal economics.</p>"},{"location":"api/config/WellTrajectory/#purpose","title":"Purpose","text":"<ul> <li>Defines the spatial configuration of a single well, including platform location, kick-off point, and reservoir targets.</li> <li>Used to model well paths for simulation and cost calculations.</li> </ul>"},{"location":"api/config/WellTrajectory/#main-fields","title":"Main Fields","text":"<ul> <li><code>platform</code>: List of three floats <code>[x, y, z]</code> \u2014 Coordinates of the platform.</li> <li><code>kick_off</code>: List of three floats <code>[x, y, z]</code> \u2014 Kick-off point of the well.</li> <li><code>targets</code>: List of lists of three floats <code>[[x, y, z], ...]</code> \u2014 Target coordinates, e.g., top and bottom of the reservoir.</li> </ul>"},{"location":"api/config/WellTrajectory/#example-yaml","title":"Example YAML","text":"<pre><code>well_trajectories:\n  INJ1:\n    platform: [0, 0, 0.0]\n    kick_off: [0, 0, 800.0]\n    targets: [[800, 500, 2300], [1800, 500, 2400]]\n  PRD1:\n    platform: [0, 0, 0.0]\n    kick_off: [0, 0, 800.0]\n    targets: [[800, -500, 2300], [1800, -500, 2400]]\n</code></pre> <p>In this structure, each well name (e.g., <code>INJ1</code>, <code>PRD1</code>) maps to a <code>WellTrajectory</code> configuration.</p>"},{"location":"api/config/WellTrajectory/#usage","title":"Usage","text":"<pre><code>from pythermonomics.config.well_trajectories_config import WellTrajectory\n\nwell_trajectories = {\n    \"INJ1\": WellTrajectory(\n        platform=[0, 0, 0.0],\n        kick_off=[0, 0, 800.0],\n        targets=[[800, 500, 2300], [1800, 500, 2400]],\n    ),\n    \"PRD1\": WellTrajectory(\n        platform=[0, 0, 0.0],\n        kick_off=[0, 0, 800.0],\n        targets=[[800, -500, 2300], [1800, -500, 2400]],\n    ),\n}\n</code></pre>"},{"location":"api/data/DeviationFileReader/","title":"DeviationFileReader","text":"<p>Module: <code>pythermonomics.data.read_deviation_file</code></p> <p>Reads deviation files for wells and extracts well name and coordinates.</p>"},{"location":"api/data/DeviationFileReader/#purpose","title":"Purpose","text":"<ul> <li>Parses well deviation files to obtain well trajectory and coordinate data.</li> <li>Handles errors in file format and missing data robustly.</li> </ul>"},{"location":"api/data/DeviationFileReader/#main-methods","title":"Main Methods","text":"<ul> <li><code>read_deviation_file()</code>: Returns well name and coordinate data as a tuple.</li> </ul>"},{"location":"api/data/DeviationFileReader/#usage","title":"Usage","text":"<pre><code>from pythermonomics.data.read_deviation_file import DeviationFileReader\n\nreader = DeviationFileReader(filename=\"well1.dev\")\nwell_name, coords = reader.read_deviation_file()\n</code></pre>"},{"location":"api/data/SimulationDataReader/","title":"SimulationDataReader","text":"<p>Module: <code>pythermonomics.data.read_sim_data_from_csv</code></p> <p>Reads OPM/Eclipse simulation data from CSV files.</p>"},{"location":"api/data/SimulationDataReader/#purpose","title":"Purpose","text":"<ul> <li>Extracts well names and states from simulation output.</li> <li>Provides access to relevant time-series results for further calculations.</li> </ul>"},{"location":"api/data/SimulationDataReader/#main-methods","title":"Main Methods","text":"<ul> <li><code>get_relevant_simulation_results()</code>: Returns a DataFrame with required simulation results.</li> <li><code>extract_well_names_from_csv()</code>: Extracts well names from CSV columns.</li> <li><code>extract_well_states_final_timestep()</code>: Gets well states at the final timestep.</li> <li><code>add_single_temperature_column()</code>: Adds a temperature column to the DataFrame.</li> </ul>"},{"location":"api/data/SimulationDataReader/#usage","title":"Usage","text":"<pre><code>from pythermonomics.data.read_sim_data_from_csv import SimulationDataReader\n\nreader = SimulationDataReader(csv_file=\"simulation.csv\")\nresults = reader.get_relevant_simulation_results()\n</code></pre>"},{"location":"api/data/SimulationModelResults/","title":"SimulationModelResults","text":"<p>Module: <code>pythermonomics.data.simulation_model_results</code></p> <p>Reads simulation results from summary file (CSV) and well-paths from deviation files.</p>"},{"location":"api/data/SimulationModelResults/#purpose","title":"Purpose","text":"<ul> <li>Combines summary simulation results and deviation file data for wells.</li> <li>Provides a unified interface for downstream calculations.</li> </ul>"},{"location":"api/data/SimulationModelResults/#main-methods","title":"Main Methods","text":"<ul> <li><code>__init__()</code>: Loads summary and deviation data for wells.</li> </ul>"},{"location":"api/data/SimulationModelResults/#usage","title":"Usage","text":"<pre><code>from pythermonomics.data.simulation_model_results import SimulationModelResults\n\nresults = SimulationModelResults(\n    summary_file=\"summary.csv\",\n    path_deviation_files=\"deviation_dir/\",\n)\n</code></pre>"},{"location":"api/data/WellResults/","title":"WellResults","text":"<p>Module: <code>pythermonomics.data.well_results</code></p> <p>Reads simulated well paths and production characteristics over time from provided configuration data.</p>"},{"location":"api/data/WellResults/#purpose","title":"Purpose","text":"<ul> <li>Manages well path and production data.</li> <li>Provides access to time-series results and well states for further calculations.</li> </ul>"},{"location":"api/data/WellResults/#main-methods","title":"Main Methods","text":"<ul> <li><code>read_wellpaths_production()</code>: Reads well paths and production characteristics.</li> <li><code>read_well_path_and_types()</code>: Reads well path and types.</li> </ul>"},{"location":"api/data/WellResults/#usage","title":"Usage","text":"<pre><code>from pythermonomics.data.well_results import WellResults\n\nwell_results = WellResults(\n    wells=wells,\n    reservoir_parameters=reservoir_parameters,\n    parameters=parameters,\n    nyear=nyear,\n)\ndf, states, coords = well_results.read_wellpaths_production()\n</code></pre>"},{"location":"api/energy_model/EnergyCalculator/","title":"EnergyCalculator","text":"<p>Module: <code>pythermonomics.energy_model.energy_calculator</code></p> <p>Main class for geothermal energy calculations.</p>"},{"location":"api/energy_model/EnergyCalculator/#purpose","title":"Purpose","text":"<ul> <li>Computes energy production, injection, and temperature profiles for geothermal wells.</li> <li>Integrates simulation results and well trajectory data.</li> </ul>"},{"location":"api/energy_model/EnergyCalculator/#main-methods","title":"Main Methods","text":"<ul> <li><code>compute_energy(cashflow)</code>: Calculates energy terms and updates the cashflow DataFrame.</li> </ul>"},{"location":"api/energy_model/EnergyCalculator/#usage","title":"Usage","text":"<pre><code>from pythermonomics.energy_model.energy_calculator import EnergyCalculator\n\ncalc = EnergyCalculator(economics_instance=economics_instance)\ncashflow, nwp, nwi = calc.compute_energy(cashflow=cashflow)\n</code></pre>"},{"location":"api/npv_model/CostModelWell/","title":"CostModelWell","text":"<p>Module: <code>pythermonomics.npv_model.costmodel_well</code></p> <p>Computes costs for wells based on well trajectories.</p>"},{"location":"api/npv_model/CostModelWell/#purpose","title":"Purpose","text":"<ul> <li>Calculates well costs for multilateral and standard wells.</li> <li>Integrates with well trajectory and project parameters.</li> </ul>"},{"location":"api/npv_model/CostModelWell/#main-methods","title":"Main Methods","text":"<ul> <li><code>compute_costs()</code>: Returns total well costs.</li> </ul>"},{"location":"api/npv_model/CostModelWell/#usage","title":"Usage","text":"<pre><code>from pythermonomics.npv_model.costmodel_well import CostModelWell\n\ncost_model = CostModelWell(geothermal_economics_instance=geothermal_economics_instance)\ncosts = cost_model.compute_costs()\n</code></pre>"},{"location":"api/npv_model/EconomicsCalculator/","title":"EconomicsCalculator","text":"<p>Module: <code>pythermonomics.npv_model.economics_calculator</code></p> <p>Main class for NPV and LCOE calculations.</p>"},{"location":"api/npv_model/EconomicsCalculator/#purpose","title":"Purpose","text":"<ul> <li>Computes Net Present Value (NPV) and Levelized Cost of Energy (LCOE) for geothermal projects.</li> <li>Integrates energy calculations, CAPEX/OPEX, and financial metrics.</li> </ul>"},{"location":"api/npv_model/EconomicsCalculator/#main-methods","title":"Main Methods","text":"<ul> <li><code>compute_economics()</code>: Returns NPV, LCOE, cashflow DataFrame, well results, and well states.</li> </ul>"},{"location":"api/npv_model/EconomicsCalculator/#usage","title":"Usage","text":"<pre><code>from pythermonomics.npv_model.economics_calculator import EconomicsCalculator\n\ncalc = EconomicsCalculator(economics_instance=economics_instance)\nnpv, lcoe, cashflow, wellRes, well_states = calc.compute_economics()\n</code></pre>"},{"location":"development_notes/LimitationsAndAssumptions/","title":"Limitations and Assumptions","text":"<p>This tool is under active development. The following limitations and assumptions currently apply, but many of these features are planned for future releases:</p> <ul> <li> <p>Multilateral wells:   Multilateral wells are not yet supported via deviation files. For advanced well architectures, please use the detailed trajectory formats (see the well-module). Support for multilateral wells via deviation files is planned.</p> </li> <li> <p>System configuration:   The current implementation is optimized for doublet systems (one injector and one producer or multilateral variants). While the codebase is being extended to support more complex well arrangements, some features (such as friction loss calculations) may not yet be fully robust for systems with more than two wells vertical wells (multilateral doublet systems are supported).</p> </li> <li> <p>Other features:   Additional features and improvements\u2014including enhanced error handling, more flexible input formats, and expanded economic modeling\u2014are planned for future updates.</p> </li> <li> <p>Reporting steps and time resolution:   When using simulation time-series as input (i.e., summary data), reporting steps are currently filtered and clipped to exact integer years from the start of the simulation. This means that only annual values are used in the economic calculations. In future versions, support will be added for arbitrary reporting steps, allowing the full accuracy of the simulation data (e.g., weekly or daily) to be reflected in the economic results.</p> </li> </ul> <p>If you have specific requirements or would like to contribute, please open an issue or pull request on the project repository!</p>"},{"location":"equations/NpvAndLcoeEquations/","title":"Net Present Value and LCOE Equations","text":"<p>This page documents the main equations used in the geothermal economics calculations, as implemented in <code>EconomicsCalculator.compute_economics()</code>.</p>"},{"location":"equations/NpvAndLcoeEquations/#net-present-value-npv","title":"Net Present Value (NPV)","text":"<p>The Net Present Value (NPV) is the sum of all discounted net revenues over the project lifetime:</p> \\[ \\mathrm{NPV} = \\sum_{t=0}^{N} \\mathrm{DR}(t) = \\sum_{t=0}^{N} \\frac{\\mathrm{NR}(t)}{(1 + r)^{t}} \\] <p>where:</p> <ul> <li>\\(\\mathrm{DR}(t)\\) is the discounted revenue for each year \\(t\\)</li> <li>\\(\\mathrm{NR}(t)\\) is the net revenue in year \\(t\\)</li> <li>\\(r\\) is the discount rate</li> <li>\\(t\\) is the year index</li> </ul>"},{"location":"equations/NpvAndLcoeEquations/#net-revenue","title":"Net Revenue","text":"<p>Net revenue is calculated as:</p> \\[ \\mathrm{NR}(t) = \\mathrm{GR}(t) - \\mathrm{T}(t) \\] <p>where:</p> <ul> <li>the gross revenue is calculated as \\(\\mathrm{GR}(t) = \\mathrm{I}(t) - \\mathrm{C}(t)\\)</li> <li>the tax is calculated as \\(\\mathrm{T}(t) = \\max(\\mathrm{TGR}(t), 0) \\cdot \\mathrm{T_r}\\)</li> <li>\\(\\mathrm{T_r}\\) is the tax rate</li> <li>and the taxable gross revenue is calculated as \\(\\mathrm{TGR}(t) = \\mathrm{I}(t) - \\mathrm{C_{tax}}(t)\\)</li> </ul>"},{"location":"equations/NpvAndLcoeEquations/#income","title":"Income","text":"<p>The income is based on the produced energy and the heat price (with possible subsidy):</p> \\[ \\mathrm{I}(t) = \\mathrm{E_{p,w}}(t) \\cdot \\mathrm{HP}(t) \\] <p>where:</p> <ul> <li>\\(\\mathrm{E_{p,w}}(t)\\) is the total effective energy contained in produced water</li> <li>\\(\\mathrm{HP}(t)\\) is either the feed-in price or the regular price, depending on the subsidy period</li> </ul>"},{"location":"equations/NpvAndLcoeEquations/#costs","title":"Costs","text":""},{"location":"equations/NpvAndLcoeEquations/#total-costs","title":"Total costs","text":"<p>Total costs are the sum of electricity cost, OPEX, loan payments, and equity:</p> \\[ \\mathrm{C}(t) = \\mathrm{C_{elec}}(t) + \\mathrm{C_{opex}}(t) + \\mathrm{IP}(t) + \\mathrm{PP}(t) + \\mathrm{Eq} \\] <p>where:</p> <ul> <li>Electricity costs, \\(\\mathrm{C_{elec}}(t)\\), are defined below</li> <li>Operational costs, \\(\\mathrm{C_{opex}}(t)\\), are defined below</li> </ul> <p>and interest \\(\\mathrm{IP}(t)\\) and principal \\(\\mathrm{PP}(t)\\) payments are calculated using standard annuity formulas (based on the size of the loan \\(L\\), the loan rate \\(L_{rate}\\), and number of loan years \\(L_{year}\\)).</p> <p>and equity is defined as</p> \\[  \\mathrm{Eq} = \\mathrm{C_{capex,tot}} \\cdot \\mathrm{Eq}_{\\text{share}} \\] <p>where \\(\\mathrm{C_{capex,tot}}\\) is the total CAPEX costs and \\(\\mathrm{Eq}_{\\text{share}}\\) is the equity share (%) and the loan is defined as</p> \\[  \\mathrm{L} = \\mathrm{C_{capex,tot}} - \\mathrm{Eq} \\] <p>Taxable costs include depreciation:</p> \\[ \\mathrm{C_{tax}}(t) = \\mathrm{C_{elec}}(t) + \\mathrm{C_{opex}}(t) + \\mathrm{IP}(t) + \\mathrm{D}(t) \\]"},{"location":"equations/NpvAndLcoeEquations/#capital-expenditure-capex","title":"Capital Expenditure (CAPEX)","text":"<p>The CAPEX is calculated in steps:</p> \\[ \\mathrm{C_{capex,o}} = \\mathrm{C_{capex,b}} + \\mathrm{C_{capex,v}} \\cdot \\mathrm{P_{i}}(0) \\] <p>where:</p> <ul> <li>\\(\\mathrm{C_{capex,b}}\\) is the base capital expenditure for the project,</li> <li>\\(\\mathrm{C_{capex,v}}\\) is the variable capital expenditure per installed kW,</li> <li>\\(\\mathrm{P_{i}}(0)\\) is the installed power capacity at the start of the project.</li> </ul> <p>The total CAPEX including well costs, contingency, and pump costs is:</p> \\[ \\mathrm{C_{capex,tot}} = \\left( \\mathrm{C_{capex,o}} + \\mathrm{C_{wells}} \\right) \\cdot (1 + \\mathrm{C_{capex,c}}) + N_{\\text{wi}} \\cdot \\mathrm{C_{pump}} \\] <p>where:</p> <ul> <li>\\(\\mathrm{C_{wells}}\\) is the total cost of all wells,</li> <li>\\(\\mathrm{C_{capex,c}}\\) is the contingency fraction,</li> <li>\\(N_{\\text{wi}}\\) is the number of injection wells,</li> <li>\\(\\mathrm{C_{pump}}\\) is the cost per pump.</li> </ul> <p>The CAPEX is assigned to the first year in the cashflow.</p>"},{"location":"equations/NpvAndLcoeEquations/#electricity-cost","title":"Electricity Cost","text":"\\[ \\mathrm{C_{elec}}(t) = (\\mathrm{E_{c,inj}}(t) + \\mathrm{E_{c,prd}}(t))   \\cdot \\mathrm{EP} \\cdot (1 + \\mathrm{i_r})^{t} \\] <p>where:</p> <ul> <li>\\(\\mathrm{E_{c,inj}}(t)\\) is the energy required to operate the injection pump per well [GJ]</li> <li>\\(\\mathrm{E_{c,prd}}(t)\\) is the energy required to operate the production pump per well [GJ] </li> <li>\\(\\mathrm{i_r}\\) is the inflation rate</li> </ul>"},{"location":"equations/NpvAndLcoeEquations/#depreciation","title":"Depreciation","text":"<p>Depreciation is linear over the depreciation period:</p> \\[ \\mathrm{D}(t) = \\begin{cases} \\frac{\\mathrm{C_{capex,tot}}}{\\mathrm{D_{years}}} &amp; \\text{if } t \\leq \\mathrm{D_{years}} \\\\ 0 &amp; \\text{otherwise} \\end{cases} \\]"},{"location":"equations/NpvAndLcoeEquations/#fully-expanded-npv-equation","title":"Fully Expanded NPV Equation","text":"\\[ \\mathrm{NPV} = \\sum_{t=0}^{N} \\frac{\\mathrm{I}(t) - \\mathrm{T}(t) - \\mathrm{C}(t)}{(1+r)^{t}} = \\sum_{t=0}^{N} \\frac{\\mathrm{I}(t) - \\mathrm{T}(t) - \\big(\\mathrm{C_{elec}}(t) + \\mathrm{C_{opex}}(t) + \\mathrm{IP}(t) + \\mathrm{PP}(t) + \\mathrm{Eq} \\big)}{(1+r)^{t}} \\]"},{"location":"equations/NpvAndLcoeEquations/#levelized-cost-of-energy-lcoe","title":"Levelized Cost of Energy (LCOE)","text":"<p>The LCOE is the ratio of discounted costs to discounted energy output:</p> \\[ \\mathrm{LCOE} = 100 \\cdot \\frac{ \\sum_{t=0}^{N} \\frac{\\mathrm{C_{elec}}(t) + \\mathrm{C_{opex}}(t) + \\mathrm{IP}(t) + \\mathrm{PP}(t) - \\mathrm{C_{tax}}(t) \\cdot \\mathrm{T_r} + \\mathrm{Eq}}{(1 + r)^{t}}} { \\sum_{t=0}^{N} \\frac{(\\mathrm{E_{p,w}}(t) ) \\cdot (1 - \\mathrm{T_r})}{(1 + r)^{t}}} \\] <p>For further details, see the EconomicsCalculator API documentation.</p>"},{"location":"examples/UseJupyTerNotebook/","title":"How to use the Jupyter Notebook example","text":""},{"location":"examples/UseJupyTerNotebook/#windows","title":"Windows","text":"<p>On windows, you can install the Jupyter Notebook with the following commands:</p> <pre><code># 1) Create &amp; activate virtual environment\npy -3.11 -m venv .venv\n.\\.venv\\Scripts\\Activate.ps1\n\n# 2) Install the project with the notebook extra\npython -m pip install --upgrade pip\npip install .[notebook]\n\n# 3a) If using browser JupyterLab:\njupyter lab   # opens in the browser\n\n# 3b) If using VS Code:\n# - Install \"Python\" and \"Jupyter\" extensions.\n# - Open the .ipynb and pick the .venv as the kernel.\n#   (Only ipykernel is required in the env.)\n</code></pre> <p>and for Linux:</p> <pre><code># 1) Create &amp; activate virtual environment\npython3 -m venv .venv\nsource .venv/bin/activate\n\n# 2) Install the project with the notebook extra\npython -m pip install --upgrade pip\npip install '.[notebook]'   # quote for zsh\n\n# 3a) Browser JupyterLab:\njupyter lab\n\n# 3b) VS Code:\n# - Install \"Python\" and \"Jupyter\" extensions.\n# - Select the .venv as the kernel (only ipykernel required).\n</code></pre>"},{"location":"input_description/InputConfigYaml/","title":"YAML Configuration Specification","text":"<p>This page describes the structure and meaning of the YAML configuration file (<code>input.yaml</code>) used for geothermal economics calculations. Each section of the YAML file corresponds to a Pydantic config class in the codebase, providing validation and documentation for all parameters.</p>"},{"location":"input_description/InputConfigYaml/#top-level-structure","title":"Top-Level Structure","text":"<p>A typical configuration file looks like:</p> <pre><code>energy_loss_parameters:\n  well_roughness: 0.138\n  well_tubing: 8.5\n  useheatloss: true\n  tsurface: 10.0\n  tgrad: 0.031\n\nreservoir_simulation_parameters:\n  injection_temperature: 50\n  production_temperature: 90\n  injection_BHP: 260\n  production_BHP: 200\n  flowrate: 400\n  salinity: 140000\n\ntechno_economic_parameters:\n  loadhours: 6000\n  wellcost_scaling: 1.5\n  wellcost_base: 250000\n  well_curvfac: 1.0\n  wellcost_linear: 700\n  wellcost_cube: 0.2\n  pump_efficiency: 0.6\n  pump_cost: 500000\n  pump_life: 5\n  CAPEX_base: 3000000\n  CAPEX_variable: 300\n  CAPEX_contingency: 0.15\n  OPEX_base: 0\n  OPEX_variable: 100\n  OPEX_variable_produced: 0.19\n  equity_share: 0.2\n  loan_nyear: 15\n  loan_rate: 0.05\n  discount_rate: 0.145\n  inflation_rate: 0.015\n  tax_rate: 0.25\n  tax_depreciation_nyear: 15\n  heat_price: 5.1\n  heat_price_feedin: 5.1\n  electricity_price: 8\n  lifecycle_years: 15\n  subsidy_years: 15\n\nwell_trajectories:\n  INJ1:\n    platform: [0, 0, 0.0]\n    kick_off: [0, 0, 800.0]\n    targets: [[800, 500, 2300], [1800, 500, 2400]]\n  PRD1:\n    platform: [0, 0, 0.0]\n    kick_off: [0, 0, 800.0]\n    targets: [[800, -500, 2300], [1800, -500, 2400]]\n</code></pre>"},{"location":"input_description/InputConfigYaml/#sections-and-their-classes","title":"Sections and Their Classes","text":""},{"location":"input_description/InputConfigYaml/#1-energy_loss_parameters","title":"1. <code>energy_loss_parameters</code>","text":"<p>Class: <code>EnergyLossParameters</code></p> <ul> <li><code>well_roughness</code>: Well roughness in milli-inch.</li> <li><code>well_tubing</code>: Production tubing diameter in inches.</li> <li><code>useheatloss</code>: (Optional) Enable/disable heat loss calculations.</li> <li><code>tsurface</code>: (Optional) Surface temperature in \u00b0C.</li> <li><code>tgrad</code>: (Optional) Geothermal gradient in \u00b0C/m.</li> </ul> <p>See: <code>EnergyLossParameters</code></p>"},{"location":"input_description/InputConfigYaml/#2-reservoir_simulation_parameters","title":"2. <code>reservoir_simulation_parameters</code>","text":"<p>Class: <code>ReservoirSimulationParameters</code></p> <p>This simulation class will be used if you don't prescribe any simulation time series, see SimulationTimeSeries</p> <ul> <li><code>injection_temperature</code>: Injection temperature (\u00b0C).</li> <li><code>production_temperature</code>: Production temperature (\u00b0C).</li> <li><code>injection_BHP</code>: Injection bottom-hole pressure (bar).</li> <li><code>production_BHP</code>: Production bottom-hole pressure (bar).</li> <li><code>flowrate</code>: Flowrate (m\u00b3/h).</li> <li><code>salinity</code>: Brine salinity (ppm).</li> </ul> <p>See: <code>ReservoirSimulationParameters</code></p>"},{"location":"input_description/InputConfigYaml/#3-techno_economic_parameters","title":"3. <code>techno_economic_parameters</code>","text":"<p>Class: <code>TechnoEconomicParameters</code></p> <p>Contains all economic and technical parameters for the project, such as:</p> <ul> <li><code>loadhours</code>: Operational hours per year.</li> <li><code>wellcost_scaling</code>, <code>wellcost_base</code>, <code>well_curvfac</code>, <code>wellcost_linear</code>, <code>wellcost_cube</code>: Well cost model parameters.</li> <li><code>pump_efficiency</code>, <code>pump_cost</code>, <code>pump_life</code>: Pump parameters.</li> <li><code>CAPEX_base</code>, <code>CAPEX_variable</code>, <code>CAPEX_contingency</code>: Capital expenditure parameters.</li> <li><code>OPEX_base</code>, <code>OPEX_variable</code>, <code>OPEX_variable_produced</code>: Operational expenditure parameters.</li> <li><code>equity_share</code>, <code>loan_nyear</code>, <code>loan_rate</code>, <code>discount_rate</code>, <code>inflation_rate</code>: Financial parameters.</li> <li><code>tax_rate</code>, <code>tax_depreciation_nyear</code>: Taxation parameters.</li> <li><code>heat_price</code>, <code>heat_price_feedin</code>, <code>electricity_price</code>: Energy price parameters.</li> <li><code>nyear</code>, <code>subsidy_years</code>: Project duration and subsidy.</li> </ul> <p>See: <code>TechnoEconomicParameters</code></p>"},{"location":"input_description/InputConfigYaml/#4-well_trajectories","title":"4. <code>well_trajectories</code>","text":"<p>Class: <code>WellTrajectory</code></p> <p>A dictionary mapping well names to their spatial configuration:</p> <ul> <li><code>platform</code>: <code>[x, y, z]</code> coordinates of the well platform.</li> <li><code>kick_off</code>: <code>[x, y, z]</code> coordinates of the well kick-off point.</li> <li><code>targets</code>: List of <code>[x, y, z]</code> reservoir target coordinates.</li> </ul> <p>See: <code>WellTrajectory</code></p>"},{"location":"input_description/InputConfigYaml/#loading-and-validation","title":"Loading and Validation","text":"<p>The YAML file is loaded and validated using the <code>GeothermalEconomicsConfig</code> class, which ensures all required fields are present and correctly typed.</p> <pre><code>from pythermonomics.config.geothermal_economics_config import GeothermalEconomicsConfig\n\nconfig = GeothermalEconomicsConfig.load_from_file(\"input.yaml\")\n</code></pre>"},{"location":"input_description/InputConfigYaml/#further-reading","title":"Further Reading","text":"<ul> <li>API Reference: Config Classes</li> </ul>"},{"location":"input_description/InputDeviationFiles/","title":"Deviation File Specification","text":"<p>This page describes the format and usage of well deviation input files, which are used to specify the spatial trajectory of each well in a geothermal project.</p>"},{"location":"input_description/InputDeviationFiles/#file-format","title":"File Format","text":"<p>A deviation file is a plain text file containing:</p> <ul> <li>The well name (required, as <code>WELLNAME: 'NAME'</code>)</li> <li>A header line (optional, usually commented with <code>#</code>)</li> <li>Multiple rows of well trajectory data:   Each row contains four floating-point numbers: X, Y, TVDMSL, MDMSL</li> <li>The end of the file is marked by a line containing <code>-999</code></li> </ul> <p>Example:</p> <pre><code>WELLNAME: 'INJ1'\n#       X           Y      TVDMSL       MDMSL\n2917.480000    4860.460000    0.000000    0.00000\n2917.480000    4860.460000    500.000000    500.00000\n2014.905693    5859.854755    2702.014954    4417.110301\n...\n2486.378463    5184.708355    2853.445038    5502.348472\n-999\n</code></pre> <p>Column meanings: - X: X coordinate (e.g., meters, local grid) - Y: Y coordinate (e.g., meters, local grid) - TVDMSL: True Vertical Depth (meters below mean sea level) - MDMSL: Measured Depth (meters along well path, below mean sea level)</p>"},{"location":"input_description/InputDeviationFiles/#usage-in-the-code","title":"Usage in the Code","text":"<p>Deviation files are read using the <code>DeviationFileReader</code> class:</p> <pre><code>from pythermonomics.data.read_deviation_file import DeviationFileReader\n\nreader = DeviationFileReader(filename=\"INJ1.dev\")\nwell_name, deviation_data = reader.read_deviation_file()\n</code></pre> <ul> <li><code>well_name</code> will be a string (e.g., <code>'INJ1'</code>)</li> <li><code>deviation_data</code> will be a NumPy array of shape <code>(n_points, 4)</code> with columns <code>[X, Y, TVDMSL, MDMSL]</code></li> </ul>"},{"location":"input_description/InputDeviationFiles/#notes","title":"Notes","text":"<ul> <li>The file must contain the <code>WELLNAME:</code> line and end with <code>-999</code>.</li> <li>Lines starting with <code>#</code> are ignored as comments.</li> <li>Each data row must have exactly four numeric values.</li> <li>If the file is malformed or missing data, an error will be raised.</li> </ul>"},{"location":"input_description/InputDeviationFiles/#example-directory-structure","title":"Example Directory Structure","text":"<p>If you have multiple wells, place each deviation file in a directory and reference that directory in your configuration:</p> <pre><code>well_paths/\n  INJ1.dev\n  PRD1.dev\n  ...\n</code></pre> <p>And you simply refer to that folder in your arguments when running either the CLI or use it directly in your python code:</p> <p>For more details, see the DeviationFileReader API documentation.</p>"},{"location":"input_description/SimulationTimeSeries/","title":"Simulation Data (CSV) Specification","text":"<p>This page describes the format and usage of simulation data input files, which are used to provide time-series results for all wells in a geothermal project.</p>"},{"location":"input_description/SimulationTimeSeries/#file-format","title":"File Format","text":"<p>A simulation data file is a CSV file with the following structure:</p> <ul> <li>The first row contains column headers (keywords).</li> <li>Each subsequent row contains time-series data for a single timestep.</li> <li>Columns include both global and well-specific keywords.</li> </ul> <p>Example (header and first data row):</p> <pre><code>,DATES,YEARS,FPR,WBHP:INJ1,WBHP:PRD1,WSTAT:INJ1,WSTAT:PRD1,WTICHEA:INJ1,WTICHEA:PRD1,WTPCHEA:INJ1,WTPCHEA:PRD1,WWIR:INJ1,WWIR:PRD1,WWPR:INJ1,WWPR:PRD1,WWIT:INJ1,WWIT:PRD1,WWPT:INJ1,WWPT:PRD1,DAYS\n0,2020-01-01 00:00:00,0.08,257.97,0.0,0.0,3.0,3.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,30.99\n</code></pre>"},{"location":"input_description/SimulationTimeSeries/#column-definitions","title":"Column Definitions","text":""},{"location":"input_description/SimulationTimeSeries/#global-columns-appear-once","title":"Global Columns (appear once)","text":"<ul> <li>DATES: Date/time of the simulation step (string or datetime)</li> <li>YEARS: Simulation time in years (float)</li> <li>FPR: Field pressure (float)</li> <li>DAYS: Simulation time in days (float, may be computed from YEARS)</li> </ul>"},{"location":"input_description/SimulationTimeSeries/#well-related-columns-repeat-for-each-well","title":"Well-Related Columns (repeat for each well)","text":"<p>These columns are named as <code>KEYWORD:WELLNAME</code> (e.g., <code>WBHP:INJ1</code>, <code>WSTAT:PRD1</code>):</p> <ul> <li>WBHP: Bottom-hole pressure (bar)</li> <li>WSTAT: Well state (1.0 = production, 2.0 = injection, 3.0 = shut-in)</li> <li>WTICHEA: Injection well temperature (\u00b0C)</li> <li>WTPCHEA: Production well temperature (\u00b0C)</li> <li>WWIR: Water injection rate (m\u00b3/d)</li> <li>WWIT: Water injection total (m\u00b3)</li> <li>WWPR: Water production rate (m\u00b3/d)</li> <li>WWPT: Water production total (m\u00b3)</li> <li>(Other well-related keywords may be present depending on the simulator and configuration)</li> </ul> <p>Note: Each well will have its own set of columns for each well-related keyword.</p>"},{"location":"input_description/SimulationTimeSeries/#example-abbreviated","title":"Example (abbreviated)","text":"<pre><code>,DATES,YEARS,FPR,WBHP:INJ1,WBHP:PRD1,WSTAT:INJ1,WSTAT:PRD1,WTICHEA:INJ1,WTICHEA:PRD1,WTPCHEA:INJ1,WTPCHEA:PRD1,WWIR:INJ1,WWIR:PRD1,WWPR:INJ1,WWPR:PRD1,WWIT:INJ1,WWIT:PRD1,WWPT:INJ1,WWPT:PRD1,DAYS\n0,2020-01-01 00:00:00,0.08,257.97,0.0,0.0,3.0,3.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,30.99\n1,2021-01-01 00:00:00,1.08,257.96,256.38,2.0,1.0,30.0,0.0,0.0,80.0,99.63,0.0,8000.0,0.0,8000.0,0.0,8000.0,397.00\n...\n</code></pre>"},{"location":"input_description/SimulationTimeSeries/#usage-in-the-code","title":"Usage in the Code","text":"<p>Simulation data files are read using the <code>SimulationDataReader</code> class:</p> <pre><code>from pythermonomics.data.read_sim_data_from_csv import SimulationDataReader\n\nreader = SimulationDataReader(csv_file=\"simulation_time_series.csv\")\nresults = reader.get_relevant_simulation_results()\n</code></pre> <ul> <li>The reader will automatically extract well names, states, and relevant time-series data for each well.</li> </ul>"},{"location":"input_description/SimulationTimeSeries/#notes","title":"Notes","text":"<ul> <li>The file must contain all required global and well-related columns as expected by the code.</li> <li>Well-related columns must use the <code>KEYWORD:WELLNAME</code> format.</li> <li>The code will validate the presence of all required columns and raise an error if any are missing.</li> <li>The <code>DAYS</code> column may be computed if not present, based on <code>YEARS</code>.</li> </ul>"},{"location":"input_description/SimulationTimeSeries/#example-directory-structure","title":"Example Directory Structure","text":"<pre><code>summary_files/\n  simulation_time_series.csv\n  ...\n</code></pre> <p>And you simply refer to the file path in your arguments when running either the CLI or use it directly in your python code:</p> <p>For more details, see the SimulationDataReader API documentation.</p>"},{"location":"output_description/CashflowColumnNames/","title":"Cashflow Column Names and Units","text":"<p>This page describes the meaning and units of columns in the cashflow DataFrame/CSV.</p>"},{"location":"output_description/CashflowColumnNames/#general-columns","title":"General Columns","text":"<ul> <li>time: Simulation time [days]  </li> <li>year: Simulation time in years [years]  </li> <li>dTime: Time step length [days]  </li> </ul>"},{"location":"output_description/CashflowColumnNames/#aggregate-energy-and-power","title":"Aggregate Energy and Power","text":"<ul> <li>enTemp: Total effective energy contained in produced water [GJ]  </li> <li>enProd: Total pumping energy for all production wells [GJ]  </li> <li>enInj: Total pumping energy for all injection wells [GJ]  </li> <li>enPower: Total effective power produced [MW]  </li> <li>enPowercons: Total power consumed [MW]  </li> <li>COP: Coefficient of Performance [-]  </li> </ul>"},{"location":"output_description/CashflowColumnNames/#economic-columns","title":"Economic Columns","text":"<ul> <li>capex: Total capital expenditure [euro]  </li> <li>wellcosts: Total well costs [euro]  </li> <li>opex: Operational expenditure [euro]  </li> <li>income: Income from heat sales [euro]  </li> <li>elecCost: Electricity cost [euro]  </li> <li>ipmt: Interest payment on the loan for the year [euro]  </li> <li>ppmt: Principal payment on the loan for the year [euro]  </li> <li>depreciation: Depreciation for tax purposes [euro]  </li> <li>cost: Total costs [euro]  </li> <li>costTax: Taxable costs [euro]  </li> <li>grossRev: Gross revenue [euro]  </li> <li>grossRevTax: Gross revenue for tax calculation [euro]  </li> <li>tax: Taxes paid [euro]  </li> <li>netRev: Net revenue [euro]  </li> <li>discRev: Discounted revenue [euro]  </li> <li>npv: Net Present Value [euro]  </li> <li>lcoe_kWh: Discounted energy for LCOE calculation [kWh equivalent]  </li> <li>lcoe_costs: Discounted costs for LCOE calculation [euro]  </li> <li>lcoe: Levelized Cost of Energy [-]  </li> </ul>"},{"location":"output_description/CashflowColumnNames/#well-related-columns-per-well","title":"Well-Related Columns (Per Well)","text":"<p>These columns repeat for each well token (e.g., <code>INJ1</code>, <code>PRD1</code>):</p> <ul> <li>temp_\\&lt;WELL&gt;: Bottom-hole temperature [\u00b0C]  </li> <li>wicum_\\&lt;WELL&gt;: Unscaled cumulative injected water [m\u00b3]  </li> <li>winj_\\&lt;WELL&gt;: Injected water volume in current step [m\u00b3]  </li> <li>wiRate_\\&lt;WELL&gt;: Daily injection rate [m\u00b3/day]  </li> <li>wpcum_\\&lt;WELL&gt;: Unscaled cumulative produced water [m\u00b3]  </li> <li>wprod_\\&lt;WELL&gt;: Produced water volume in current step [m\u00b3]  </li> <li>wpRate_\\&lt;WELL&gt;: Daily production rate [m\u00b3/day]  </li> <li>dTemp_\\&lt;WELL&gt;: Temperature difference between producer and injector [\u00b0C]  </li> <li>enInj_\\&lt;WELL&gt;: Pumping energy for injection [GJ]  </li> <li>enTemp_\\&lt;WELL&gt;: Energy contained in produced water [GJ]  </li> <li>enProd_\\&lt;WELL&gt;: Pumping energy for production [GJ]  </li> <li>dP_\\&lt;WELL&gt;: Pressure difference [bar]  </li> </ul>"},{"location":"output_description/CashflowColumnNames/#aggregate-well-kpis","title":"Aggregate Well KPIs","text":"<ul> <li>injTemp: Injection temperature [\u00b0C]  </li> <li>prodTemp: Production temperature [\u00b0C]  </li> <li>avgInjP: Average injection pressure [bar]  </li> </ul>"}]}